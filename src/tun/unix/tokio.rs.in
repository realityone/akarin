use std::io::{self, Read, Write};
use std::mem;

use futures::{Async, Future, Poll};
use tokio_core::reactor::{Handle, PollEvented};

use super::device;

#[derive(Debug)]
pub struct Device {
    device: PollEvented<device::Device>,
}

impl Device {
    pub fn new(device: device::Device, handle: &Handle) -> io::Result<Self> {
        Ok(Self { device: PollEvented::new(device, handle)? })
    }

    pub fn write(&mut self, buf: &[u8]) -> io::Result<usize> {
        if let Async::NotReady = self.device.poll_write() {
            return Err(io::ErrorKind::WouldBlock.into())
        }
        match self.device.get_mut().write(buf) {
            Ok(n) => Ok(n),
            Err(e) => {
                if e.kind() == io::ErrorKind::WouldBlock {
                    self.device.need_write();
                }
                Err(e)
            }
        }
    }

    pub fn write_dgram<T>(self, buf: T) -> WriteTunDgram<T>
    where
        T: AsRef<[u8]>,
    {
        WriteTunDgram {
            st: WriteTunDgramState::Writing {
                device: self,
                buf: buf,
            },
        }
    }

    pub fn read(&mut self, buf: &mut [u8]) -> io::Result<usize> {
        if let Async::NotReady = self.device.poll_read() {
            return Err(io::ErrorKind::WouldBlock.into())
        }
        match self.device.get_mut().read(buf) {
            Ok(n) => Ok(n),
            Err(e) => {
                if e.kind() == io::ErrorKind::WouldBlock {
                    self.device.need_read();
                }
                Err(e)
            }
        }
    }

    pub fn read_dgram<T>(self, buf: T) -> ReadTunDgram<T>
    where
        T: AsMut<[u8]>,
    {
        ReadTunDgram {
            st: ReadTunDgramState::Reading {
                device: self,
                buf: buf,
            },
        }
    }
}

pub struct WriteTunDgram<T> {
    st: WriteTunDgramState<T>,
}

enum WriteTunDgramState<T> {
    Writing { device: Device, buf: T },
    Empty,
}

impl<T> Future for WriteTunDgram<T>
where
    T: AsRef<[u8]>,
{
    type Item = (Device, T);
    type Error = io::Error;

    fn poll(&mut self) -> Poll<Self::Item, Self::Error> {
        if let WriteTunDgramState::Writing {
            ref mut device,
            ref buf,
        } = self.st
        {
            let n = try_nb!(device.write(buf.as_ref()));
            if n < buf.as_ref().len() {
                return Err(io::Error::new(io::ErrorKind::Other, "Couldn't send whole bufer".to_string()));
            }
        }
        if let WriteTunDgramState::Writing { device, buf } = mem::replace(&mut self.st, WriteTunDgramState::Empty) {
            return Ok(Async::Ready((device, buf)));
        }

        return Err(io::Error::new(io::ErrorKind::Other, "unreachable state".to_string()));
    }
}


pub struct ReadTunDgram<T> {
    st: ReadTunDgramState<T>,
}

enum ReadTunDgramState<T> {
    #[allow(dead_code)]
    Reading { device: Device, buf: T },
    Empty,
}

impl<T> Future for ReadTunDgram<T>
where
    T: AsMut<[u8]>,
{
    type Item = (Device, T, usize);
    type Error = io::Error;

    fn poll(&mut self) -> Poll<Self::Item, Self::Error> {
        let received;

        if let ReadTunDgramState::Reading {
            ref mut device,
            ref mut buf,
        } = self.st
        {
            received = try_nb!(device.read(buf.as_mut()));
        } else {
            return Err(io::Error::new(io::ErrorKind::Other, "Can't read in current state".to_string()));
        }

        if let ReadTunDgramState::Reading { device, buf } = mem::replace(&mut self.st, ReadTunDgramState::Empty) {
            return Ok(Async::Ready((device, buf, received)));
        }

        return Err(io::Error::new(io::ErrorKind::Other, "unreachable state".to_string()));
    }
}
